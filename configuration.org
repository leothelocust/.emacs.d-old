* Package Management

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  ;; (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package)
    (package-refresh-contents))

  (setq use-package-always-ensure t)
#+END_SRC

* GUI & Startup

Removes initial startup screen and hides scroll and toolbars

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (tool-bar-mode 0)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq confirm-nonexistent-file-or-buffer nil)
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
      kill-buffer-query-functions))

  (tooltip-mode 0)
  (global-hl-line-mode 1)
  (column-number-mode 1)

  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold 8000000))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

  (setq confirm-kill-emacs #'y-or-n-p)

  (setq frame-title-format
        '((:eval (if (buffer-file-name)
             (abbreviate-file-name (buffer-file-name))
             "%b"))))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-org-config))

  (use-package solaire-mode
    :config
    (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
    (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)
    (add-hook 'after-revert-hook #'turn-on-solaire-mode)
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    (solaire-mode-swap-bg)
    :demand t)
#+END_SRC

* System Specific Settings

#+BEGIN_SRC emacs-lisp
  (if (eq system-type "darwin")
      (progn
        (use-package exec-path-from-shell
          :config (exec-path-from-shell-initialize)
          :demand)

        ;; use zsh installed from brew
        (setq explicit-shell-file-name "/usr/local/bin/zsh")
        ;; (set-frame-font "Pragmata Pro 12" t t)
        (setq dired-use-ls-dired nil)))
#+END_SRC

* Buffer Management

#+BEGIN_SRC emacs-lisp
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name))))))

  (global-auto-revert-mode t)
#+END_SRC

** Completion and Search

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :init (add-hook 'after-init-hook 'global-company-mode))

  (use-package ivy
    :diminish ivy-mode
    :bind
    ("C-c C-r" . ivy-resume)
    ("C-s" . swiper)
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :demand)

  (use-package counsel
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-c C-f" . counsel-describe-function)
    ("C-c C-v" . counsel-describe-variable)
    ("C-c g" . counsel-git)
    ("C-c j" . counsel-git-grep))
#+END_SRC

* Editor

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (forward-line 1)
    (yank))

  (electric-pair-mode 1)
  (show-paren-mode 1)

  (use-package rainbow-delimiters)
#+END_SRC

** Syntax Checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init (global-flycheck-mode))

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint json-jsonlint)))
#+END_SRC

** Language Support
*** JavaScript/TypeScript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts$"
    :init
    (add-hook 'typescript-mode-hook #'rainbow-delimiters-mode))

  (use-package tide
    :after typescript-mode
    :config
    (add-to-list 'company-backends 'company-tide)
    (setq tide-format-options
          '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
            :placeOpenBraceOnNewLineForFunctions nil))

    (defun init-tide ()
        (tide-setup))
    (add-hook 'typescript-mode-hook #'init-tide))

  (use-package js2-mode
    :mode "\\.js$"
    :config
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    (add-hook 'js2-mode-hook #'tide-setup))
  ;;  (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))
#+END_SRC

*** C#
#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :bind (("M-." . omnisharp-go-to-definition)
       ("C-M-." . omnisharp-go-to-definition-other-window)
       ("M-," . pop-tag-mark))
    :config
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    (add-hook 'omnisharp-mode-hook 'rainbow-delimiters-mode)
    (add-to-list 'company-backends 'company-omnisharp)
    (defun my-csharp-mode-setup ()
      (setq c-syntactic-indentation t)
      (c-set-style "ellemtel")
      (setq c-basic-offset 4)
      (setq truncate-lines t))
      
    (add-hook 'csharp-mode-hook 'my-csharp-mode-setup t)
    :demand)
#+END_SRC

*** HTML
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode
    "\\.html?\\'"
    "\\.cshtml?\\'")
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json?\\'")
#+END_SRC

*** PYTHON
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :config
    (add-hook 'python-mode-hook '(lambda ()
                                   (add-to-list 'company-backends 'company-jedi))))
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Project Management

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :diminish auto-revert-mode
    :bind ("C-c m" . magit-status)
    :config
    (setq magit-completing-read-function 'ivy-completing-read))

  (use-package projectile
    :config
    (projectile-mode)
    (setq projectile-mode-line '(:eval (format " %s" (projectile-project-name))))
    (setq projectile-remember-window-configs t)
    (setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :config (counsel-projectile-on))
#+END_SRC

* TODO 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-setup-minibuffer)
    (which-key-mode))

  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-c d") 'duplicate-line)

  (use-package gitignore-mode
    :config (add-hook 'gitignore-mode-hook (lambda ()
                                             (setq require-final-newline t))))

  (use-package org
    :bind
    ("C-c c" . org-capture)
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c b" . org-iswitchb)
    :config
    (setq org-log-done t))

  (use-package org-bullets
    :diminish org-bullets-mode
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))

  (use-package dockerfile-mode
    :mode "Dockerfile\\'")

  (use-package docker-compose-mode
    :mode
    "docker-compose.yml\\'"
    "docker-compose.override.yml\\'")

  (use-package ledger-mode
    :init
    (setq ledger-clear-whole-transactions 1)
    :mode "\\.dat\\'")

  (use-package flymd
    :bind
    ("C-c f" . flymd-flyit))

  (use-package restclient
    :commands (restclient-mode)
    :mode "\\.http\\'")

  (use-package neotree
    :demand t
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-smart-open t)
    (setq projectile-switch-project-action 'neotree-projectile-action)
    (defun neotree-project-dir ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root."))))
    (setq neo-window-width 50)
    (global-set-key [f8] 'neotree-project-dir))

  (use-package ox-twbs)

  (setq org-publish-project-alist
        '(("org-notes"
           :base-directory "~/org/"
           :publishing-directory "~/public_html/"
           :publishing-function org-twbs-publish-to-html
           :with-sub-superscript nil
           )))

  ;; Silence compiler warnings
  (defvar sql-product)
  (defvar sql-prompt-regexp)
  (defvar sql-prompt-cont-regexp)

  (add-hook 'sql-interactive-mode-hook 'my-sql-interactive-mode-hook)
  (defun my-sql-interactive-mode-hook ()
    "Custom interactive SQL mode behaviours. See `sql-interactive-mode-hook'."
    (when (eq sql-product 'postgres)
      ;; Allow symbol chars in database names in prompt.
      ;; Default postgres pattern was: "^\\w*=[#>] " (see `sql-product-alist').
      (setq sql-prompt-regexp "^\\(?:\\sw\\|\\s_\\)*=[#>] ")
      ;; Ditto for continuation prompt: "^\\w*[-(][#>] "
      (setq sql-prompt-cont-regexp "^\\(?:\\sw\\|\\s_\\)*[-(][#>] "))

    ;; Deal with inline prompts in query output.
    ;; Runs after `sql-interactive-remove-continuation-prompt'.
    (add-hook 'comint-preoutput-filter-functions
              'my-sql-comint-preoutput-filter :append :local))

  (defun my-sql-comint-preoutput-filter (output)
    "Filter prompts out of SQL query output.

  Runs after `sql-interactive-remove-continuation-prompt' in
  `comint-preoutput-filter-functions'."
    ;; If the entire output is simply the main prompt, return that.
    ;; (i.e. When simply typing RET at the sqli prompt.)
    (if (string-match (concat "\\`\\(" sql-prompt-regexp "\\)\\'") output)
        output
      ;; Otherwise filter all leading prompts from the output.
      ;; Store the buffer-local prompt patterns before changing buffers.
      (let ((main-prompt sql-prompt-regexp)
            (any-prompt comint-prompt-regexp) ;; see `sql-interactive-mode'
            (prefix-newline nil))
        (with-temp-buffer
          (insert output)
          (goto-char (point-min))
          (when (looking-at main-prompt)
            (setq prefix-newline t))
          (while (looking-at any-prompt)
            (replace-match ""))
          ;; Prepend a newline to the output, if necessary.
          (when prefix-newline
            (goto-char (point-min))
            (unless (looking-at "\n")
              (insert "\n")))
          ;; Return the filtered output.
          (buffer-substring-no-properties (point-min) (point-max))))))

  (defadvice sql-send-string (before my-prefix-newline-to-sql-string)
    "Force all `sql-send-*' commands to include an initial newline.

  This is a trivial solution to single-line queries tripping up my
  custom output filter.  (See `my-sql-comint-preoutput-filter'.)"
    (ad-set-arg 0 (concat "\n" (ad-get-arg 0))))
  (ad-activate 'sql-send-string)

  ;; set default font
  (set-face-attribute 'default nil :font (font-spec :family "Essential PragmataPro" :size 11))

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(initial-frame-alist (quote ((fullscreen . maximized))))
   '(package-selected-packages
     (quote
      (org-bullets docker-compose-mode dockerfile-mode try all-the-icons neotree restclient emacs-doom-themes ledger-mode xref-js2 web-mode use-package tide solaire-mode rainbow-delimiters omnisharp markdown-mode magit json-mode js2-refactor gitignore-mode doom-themes counsel-projectile company-tern color-theme-sanityinc-tomorrow base16-theme))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC
